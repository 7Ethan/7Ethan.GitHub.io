<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sergey&#39;s blog</title>
    <link>http://sergey.coding.me/post/</link>
    <description>Recent content in Posts on Sergey&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Built by [Sergey Chueng](http://github.com/SergeyJay). </copyright>
    <lastBuildDate>Wed, 27 Sep 2017 12:00:23 +0200</lastBuildDate>
    
	<atom:link href="http://sergey.coding.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TensorFlow for Go</title>
      <link>http://sergey.coding.me/2017/09/27/tensorflow-for-go/</link>
      <pubDate>Wed, 27 Sep 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/09/27/tensorflow-for-go/</guid>
      <description>&lt;p&gt;&amp;emsp;go语言有着很好的潜力,最近TensorFlow提供了go语言的API.这些API特别适合加载Python中创建的模型，并在Go应用程序中执行它们。不过这些API还没有很稳定,目前也只是支持Linux,Mac OSX平台..&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centOS 7 简单安装配置Redis</title>
      <link>http://sergey.coding.me/2017/08/04/centos-7-%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEredis/</link>
      <pubDate>Fri, 04 Aug 2017 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2017/08/04/centos-7-%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEredis/</guid>
      <description>&lt;p&gt;&amp;emsp;centOS7上Redis的安装与简单配置.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Socket Server 自定义协议</title>
      <link>http://sergey.coding.me/2017/08/03/socket-server-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Thu, 03 Aug 2017 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2017/08/03/socket-server-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;p&gt;&amp;emsp;golang Socket Server 自定义协议的简单实现.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go语言的goroutine调度机制[转载]</title>
      <link>http://sergey.coding.me/2017/06/23/go%E8%AF%AD%E8%A8%80%E7%9A%84goroutine%E8%B0%83%E5%BA%A6%E6%9C%BA%E5%88%B6%E8%BD%AC%E8%BD%BD/</link>
      <pubDate>Fri, 23 Jun 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/06/23/go%E8%AF%AD%E8%A8%80%E7%9A%84goroutine%E8%B0%83%E5%BA%A6%E6%9C%BA%E5%88%B6%E8%BD%AC%E8%BD%BD/</guid>
      <description>&lt;p&gt;&amp;emsp;一直对goroutine的调度机制很好奇，最近在看雨痕的golang源码分析(基于go1.4),对goroutine调度慢慢有了一点点了解.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow自编码</title>
      <link>http://sergey.coding.me/2017/04/30/tensorflow%E8%87%AA%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sun, 30 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/30/tensorflow%E8%87%AA%E7%BC%96%E7%A0%81/</guid>
      <description>&lt;p&gt;&amp;emsp;用神经网络如何进行非监督形式的学习(unsupervised learning),也就是自编码( autoencoder).自编码是一种神经网络的形式.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang匿名函数(闭包)</title>
      <link>http://sergey.coding.me/2017/04/29/golang%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/</link>
      <pubDate>Sat, 29 Apr 2017 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/29/golang%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/</guid>
      <description>&lt;p&gt;&amp;emsp;GO语言的匿名函数（&lt;strong&gt;anonymous function&lt;/strong&gt;),
其实就是闭包.是指不需要定义函数名的一种函数实现方式..&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>循环神经网络回归训练</title>
      <link>http://sergey.coding.me/2017/04/27/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%9E%E5%BD%92%E8%AE%AD%E7%BB%83/</link>
      <pubDate>Thu, 27 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/27/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%9E%E5%BD%92%E8%AE%AD%E7%BB%83/</guid>
      <description>&lt;p&gt;&amp;emsp;Recurrent neural networks(RNN)循环神经网络进行回归训练实践.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang实现心跳响应</title>
      <link>http://sergey.coding.me/2017/04/27/golang%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3%E5%93%8D%E5%BA%94/</link>
      <pubDate>Thu, 27 Apr 2017 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/27/golang%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3%E5%93%8D%E5%BA%94/</guid>
      <description>&lt;p&gt;&amp;emsp;本文实现模拟实现一个简单的心跳响应.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python pandas相关</title>
      <link>http://sergey.coding.me/2017/04/25/python-pandas%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 25 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/25/python-pandas%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;p&gt;&amp;emsp;&lt;code&gt;pandas&lt;/code&gt;基于&lt;code&gt;numpy&lt;/code&gt;, 是&lt;code&gt;numpy&lt;/code&gt;的升级版本.如果用&lt;code&gt;python&lt;/code&gt;的列表和字典来作比较, 那么可以说&lt;code&gt;Numpy&lt;/code&gt;是列表形式的，没有数值标签，而 &lt;code&gt;Pandas&lt;/code&gt; 就是字典形式.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>循环神经网络分类训练</title>
      <link>http://sergey.coding.me/2017/04/24/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB%E8%AE%AD%E7%BB%83/</link>
      <pubDate>Mon, 24 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/24/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB%E8%AE%AD%E7%BB%83/</guid>
      <description>&lt;p&gt;&amp;emsp;本文使用 &lt;code&gt;RNN&lt;/code&gt; 来进行分类的训练 (Classification). 会继续使用到手写数字 MNIST 数据集. 让 RNN 从每张图片的第一行像素读到最后一行, 然后再进行分类判断.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow Saver</title>
      <link>http://sergey.coding.me/2017/04/22/tensorflow-saver/</link>
      <pubDate>Sat, 22 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/22/tensorflow-saver/</guid>
      <description>&lt;p&gt;&amp;emsp;Tensorflow 中的 saver 可以保存和加载搭建好的神经网络.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python numpy相关</title>
      <link>http://sergey.coding.me/2017/04/20/python-numpy%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 20 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/20/python-numpy%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;p&gt;&amp;emsp;NumPy is the fundamental package for scientific computing with Python.numpy运行速度也很快,对科学就算,机器学习的应用有很大帮助.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python多进程,多核运算的效率对比</title>
      <link>http://sergey.coding.me/2017/04/20/python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E6%A0%B8%E8%BF%90%E7%AE%97%E7%9A%84%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Thu, 20 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/20/python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E6%A0%B8%E8%BF%90%E7%AE%97%E7%9A%84%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;p&gt;&amp;emsp;python多进程,多核运存在一定的差别,我们应该在知晓他们的效率对比,在合适的场景使用对应的技术.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>循环神经网络RNN以及LSTM技术</title>
      <link>http://sergey.coding.me/2017/04/20/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crnn%E4%BB%A5%E5%8F%8Alstm%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Thu, 20 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/20/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crnn%E4%BB%A5%E5%8F%8Alstm%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;p&gt;&amp;emsp;Recurrent neural networks(RNN)循环神经网络,在前馈神经网络中，单独的输入完全确定了剩下的层上的神经元的 激活值。可以想象，这是一幅静态的图景:网络中的所有事物都被固定了，处于一种“冰冻结 晶”的状态。但假如，我们允许网络中的元素能够以动态方式不断地比那话。例如，隐藏神经元 的行为不是完全由前一层的隐藏神经元，而是同样受制于更早的层上的神经元的激活值。这样 肯定会带来跟前馈神经网络不同的效果。也可能隐藏和输出层的神经元的激活值不会单单由当 前的网络输入决定，而且包含了前面的输入的影响。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>卷积神经网络</title>
      <link>http://sergey.coding.me/2017/04/17/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 17 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/17/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;p&gt;&amp;emsp;Convolutional Neural Networks (CNN)卷积神经网络是近些年逐步兴起的一种人工神经网络结构, 因为利用卷积神经网络在图像和语音识别方面能够给出更优预测结果, 这一种技术也被广泛的传播可应用. 卷积神经网络最常被应用的方面是计算机的图像识别, 不过因为不断地创新, 它也被应用在视频分析, 自然语言处理, 药物发现, 等等.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python进程共享内存</title>
      <link>http://sergey.coding.me/2017/04/14/python%E8%BF%9B%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 14 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/14/python%E8%BF%9B%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;&amp;emsp;python的多进程或者说不同CPU之间通信是通过共享内存来实现的.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow分类学习</title>
      <link>http://sergey.coding.me/2017/04/04/tensorflow%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 04 Apr 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/04/04/tensorflow%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;&amp;emsp;机器学习中的监督学习(supervised learning)问题大部分可以分成 Regression (回归)和 Classification(分类) 这两种. Tensorflow 也可以做到这个. 回归是说我要预测的值是一个连续的值,比如房价,汽车的速度,飞机的高度等等.而分类是指我要把东西分成几类,比如猫狗猪牛等等.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python Tkinter相关</title>
      <link>http://sergey.coding.me/2017/03/29/python-tkinter%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 29 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/29/python-tkinter%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;p&gt;&amp;emsp;Tkinter 是使用 python 进行窗口视窗设计的模块,具有简单的构造, 多平台, 多系统的兼容性, 能让它成为让你快速入门定制窗口文件的好助手.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python进程池</title>
      <link>http://sergey.coding.me/2017/03/29/python%E8%BF%9B%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 29 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/29/python%E8%BF%9B%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;&amp;emsp;python进程池就是我们将所要运行的东西，放到池子里，python会自行解决多进程的问题.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python进程锁</title>
      <link>http://sergey.coding.me/2017/03/29/python%E8%BF%9B%E7%A8%8B%E9%94%81/</link>
      <pubDate>Wed, 29 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/29/python%E8%BF%9B%E7%A8%8B%E9%94%81/</guid>
      <description>&lt;p&gt;&amp;emsp;python进程间通信共享资源等需要保证进程安全,我们需要了解python的进程锁.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySql ERROR 2002</title>
      <link>http://sergey.coding.me/2017/03/27/mysql-error-2002/</link>
      <pubDate>Mon, 27 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/27/mysql-error-2002/</guid>
      <description>&lt;p&gt;&amp;emsp;MySql-&amp;gt; ERROR 2002 (HY000): Can&amp;rsquo;t connect to local MySQL server through socket &amp;lsquo;/tmp/mysql.sock&amp;rsquo; (2)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mxnet大规模图像分类</title>
      <link>http://sergey.coding.me/2017/03/27/mxnet%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 27 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/27/mxnet%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;p&gt;&amp;emsp;写在前面:本教程对计算机硬件要求较高,教程中使用了AWS提供的服务.&lt;/p&gt;

&lt;p&gt;&amp;emsp;训练一个具有大量图像的神经网络会带来一些挑战。即使使用最新的GPU，也不可能在合理的时间内使用单个GPU来训练大型网络。在一台机器中使用多个gpu可以稍微减轻这个问题。但是，可以连接到一台机器上的gpu的数量是有限的(通常为8或16)。本教程解释了如何使用多个包含多个gpu的多台机器来训练大的网络，使用tb级的数据。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mxnet使用预训练模型预测</title>
      <link>http://sergey.coding.me/2017/03/24/mxnet%E4%BD%BF%E7%94%A8%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E9%A2%84%E6%B5%8B/</link>
      <pubDate>Fri, 24 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/24/mxnet%E4%BD%BF%E7%94%A8%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E9%A2%84%E6%B5%8B/</guid>
      <description>&lt;p&gt;&amp;emsp;本教程解释了如何通过预先训练的模型来识别图像中的对象，以及如何执行特征提取。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python threading的join基本使用</title>
      <link>http://sergey.coding.me/2017/03/22/python-threading%E7%9A%84join%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 22 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/22/python-threading%E7%9A%84join%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;&amp;emsp;python threading 的&lt;code&gt;join&lt;/code&gt;功能, 基本应用.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang接口内部实现浅析</title>
      <link>http://sergey.coding.me/2017/03/22/golang%E6%8E%A5%E5%8F%A3%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%9E%90/</link>
      <pubDate>Wed, 22 Mar 2017 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/22/golang%E6%8E%A5%E5%8F%A3%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;p&gt;&amp;emsp;golang的接口是golang的精粹之一,本文尝试着分析一下interface内部的一些细节.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang内存对齐</title>
      <link>http://sergey.coding.me/2017/03/20/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Mon, 20 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/20/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
      <description>&lt;p&gt;&amp;emsp;golang内存对齐存在，编译器使用了内存对齐,清楚其内存对齐规则,对程序更优设计有帮助.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow可视化(2)</title>
      <link>http://sergey.coding.me/2017/03/19/tensorflow%E5%8F%AF%E8%A7%86%E5%8C%962/</link>
      <pubDate>Sun, 19 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/19/tensorflow%E5%8F%AF%E8%A7%86%E5%8C%962/</guid>
      <description>&lt;p&gt;&amp;emsp;Tensorflow 中的 tensorboard 不仅仅可以可视化神经网络结构,还可以可视化我们的 training 训练结果,根据每一次不同的训练结果来修改提升神经网络参数.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python 线程锁</title>
      <link>http://sergey.coding.me/2017/03/18/python-%E7%BA%BF%E7%A8%8B%E9%94%81/</link>
      <pubDate>Sat, 18 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/18/python-%E7%BA%BF%E7%A8%8B%E9%94%81/</guid>
      <description>&lt;p&gt;&amp;emsp;python threading 有线程锁,与之相似的就是进程锁,可以进行类比.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mxnet手写体识别</title>
      <link>http://sergey.coding.me/2017/03/15/mxnet%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB/</link>
      <pubDate>Wed, 15 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/15/mxnet%E6%89%8B%E5%86%99%E4%BD%93%E8%AF%86%E5%88%AB/</guid>
      <description>&lt;p&gt;&amp;emsp;在本教程中，我们将逐步介绍如何使用MNIST数据集构建手写的数字分类器.对于一个刚刚接触深度学习的朋友来说，这个练习可以说是“Hello World”.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow可视化(1)</title>
      <link>http://sergey.coding.me/2017/03/14/tensorflow%E5%8F%AF%E8%A7%86%E5%8C%961/</link>
      <pubDate>Tue, 14 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/14/tensorflow%E5%8F%AF%E8%A7%86%E5%8C%961/</guid>
      <description>&lt;p&gt;&amp;emsp;Tensorflow 自带 &lt;code&gt;tensorboard&lt;/code&gt;,让建造出来的神经网络可视化,让我们更好的理解学习神经网络,有助于发现编程中的问题.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow构造神经网络</title>
      <link>http://sergey.coding.me/2017/03/12/tensorflow%E6%9E%84%E9%80%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 12 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/12/tensorflow%E6%9E%84%E9%80%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;p&gt;&amp;emsp;TensorFlow简单的构建神经网络.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mxnet线性回归</title>
      <link>http://sergey.coding.me/2017/03/12/mxnet%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Sun, 12 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/12/mxnet%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
      <description>&lt;p&gt;&amp;emsp;在本文，我们将介绍如何通过使用 &lt;code&gt;mxnet&lt;/code&gt; 的 &lt;code&gt;api&lt;/code&gt; 实现线性回归。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mxnet安装</title>
      <link>http://sergey.coding.me/2017/03/11/mxnet%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 11 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/11/mxnet%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;p&gt;&amp;emsp;mxnet学习笔记,安装.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What neural etwork is?</title>
      <link>http://sergey.coding.me/2017/03/02/what-neural-etwork-is/</link>
      <pubDate>Thu, 02 Mar 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/03/02/what-neural-etwork-is/</guid>
      <description>&lt;p&gt;&amp;emsp;神经网络是什么东西呢?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TensorFlow基础笔记</title>
      <link>http://sergey.coding.me/2017/02/24/tensorflow%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 24 Feb 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/02/24/tensorflow%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;&amp;emsp;TensorFlow概要,神经网络与深度学习零散学习笔记.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python计算RGB图片H通道</title>
      <link>http://sergey.coding.me/2017/02/21/python%E8%AE%A1%E7%AE%97rgb%E5%9B%BE%E7%89%87h%E9%80%9A%E9%81%93/</link>
      <pubDate>Tue, 21 Feb 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/02/21/python%E8%AE%A1%E7%AE%97rgb%E5%9B%BE%E7%89%87h%E9%80%9A%E9%81%93/</guid>
      <description>&lt;p&gt;&amp;emsp;python进行一些简单的图像处理.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GCD产生deadlock</title>
      <link>http://sergey.coding.me/2017/02/04/gcd%E4%BA%A7%E7%94%9Fdeadlock/</link>
      <pubDate>Sat, 04 Feb 2017 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2017/02/04/gcd%E4%BA%A7%E7%94%9Fdeadlock/</guid>
      <description>&lt;p&gt;&amp;emsp;iOS开发中关于GCD中同步函数+主队列产生死锁的一点理解.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python存储进程结果 Queue</title>
      <link>http://sergey.coding.me/2017/01/30/python%E5%AD%98%E5%82%A8%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%9C-queue/</link>
      <pubDate>Mon, 30 Jan 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/01/30/python%E5%AD%98%E5%82%A8%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%9C-queue/</guid>
      <description>&lt;p&gt;&amp;emsp;简单的使用Queue实现将数据列表中的数据传入，使用四个线程处理，将结果保存在&lt;code&gt;Queue&lt;/code&gt;中，线程执行完后，从&lt;code&gt;Queue&lt;/code&gt;中获取存储的结果.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang闭包使用注意</title>
      <link>http://sergey.coding.me/2017/01/22/golang%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</link>
      <pubDate>Sun, 22 Jan 2017 12:00:23 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2017/01/22/golang%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</guid>
      <description>&lt;p&gt;&amp;emsp;go只提供了一种循环方式，即&lt;code&gt;for&lt;/code&gt;循环，在使用时可以像c那样使用，也可以通过&lt;code&gt;for range&lt;/code&gt;方式遍历容器类型如数组、切片和映射。但是在使用&lt;code&gt;for range&lt;/code&gt;时，如果使用不当，就会出现一些问题，导致程序运行行为不如预期。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之struct tag</title>
      <link>http://sergey.coding.me/2016/09/04/golang%E4%B9%8Bstruct-tag/</link>
      <pubDate>Sun, 04 Sep 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/09/04/golang%E4%B9%8Bstruct-tag/</guid>
      <description>&lt;p&gt;&amp;emsp;golang通过反射获取Struct的Tag,可以实现JSON字符串和Struct类型相互转换.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之reflect</title>
      <link>http://sergey.coding.me/2016/08/30/golang%E4%B9%8Breflect/</link>
      <pubDate>Tue, 30 Aug 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/08/30/golang%E4%B9%8Breflect/</guid>
      <description>&lt;p&gt;&amp;emsp;golang也实现运行时反射，这为我们提供一种可以在运行时操作任意类型对象的能力。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之Context</title>
      <link>http://sergey.coding.me/2016/08/28/golang%E4%B9%8Bcontext/</link>
      <pubDate>Sun, 28 Aug 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/08/28/golang%E4%B9%8Bcontext/</guid>
      <description>&lt;p&gt;&amp;emsp;Context是go控制并发的一种经典方式.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之连接池</title>
      <link>http://sergey.coding.me/2016/08/18/golang%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Thu, 18 Aug 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/08/18/golang%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>&lt;p&gt;&amp;emsp;golang通过使用通道，在多个goroutine发送和接受共享的数据，达到数据同步的目的。我们在数据库操作的时候，比较常见的就是数据连接池，也可以基于我们实现的资源池来实现。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之channel</title>
      <link>http://sergey.coding.me/2016/07/28/golang%E4%B9%8Bchannel/</link>
      <pubDate>Thu, 28 Jul 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/07/28/golang%E4%B9%8Bchannel/</guid>
      <description>&lt;p&gt;&amp;emsp;golang通过使用通道，在多个goroutine发送和接受共享的数据，达到数据同步的目的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之goroutine</title>
      <link>http://sergey.coding.me/2016/07/26/golang%E4%B9%8Bgoroutine/</link>
      <pubDate>Tue, 26 Jul 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/07/26/golang%E4%B9%8Bgoroutine/</guid>
      <description>&lt;p&gt;&amp;emsp;goroutine真的是非常强大,她是一个伟大的设计.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之Reader和Writer</title>
      <link>http://sergey.coding.me/2016/07/17/golang%E4%B9%8Breader%E5%92%8Cwriter/</link>
      <pubDate>Sun, 17 Jul 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/07/17/golang%E4%B9%8Breader%E5%92%8Cwriter/</guid>
      <description>&lt;p&gt;&amp;emsp;golang Writer 和 Reader接口的设计遵循了Unix的输入和输出，一个程序的输出可以是另外一个程序的输入。他们的功能单一并且纯粹，这样就可以非常容易的编写程序代码，又可以通过组合的概念，让我们的程序做更多的事情。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang接口浅析</title>
      <link>http://sergey.coding.me/2016/07/06/golang%E6%8E%A5%E5%8F%A3%E6%B5%85%E6%9E%90/</link>
      <pubDate>Wed, 06 Jul 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/07/06/golang%E6%8E%A5%E5%8F%A3%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;p&gt;&amp;emsp;golang的接口是golang的精粹之一,本文说说接口的基础使用.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之嵌入</title>
      <link>http://sergey.coding.me/2016/07/02/golang%E4%B9%8B%E5%B5%8C%E5%85%A5/</link>
      <pubDate>Sat, 02 Jul 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/07/02/golang%E4%B9%8B%E5%B5%8C%E5%85%A5/</guid>
      <description>&lt;p&gt;&amp;emsp;golang是一种面向对象语言么?是,又不是.面向对象语言像java代码复用的方式是继承,但是golang没有继承,她代码复用的方式是组合.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之函数方法</title>
      <link>http://sergey.coding.me/2016/06/25/golang%E4%B9%8B%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 25 Jun 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/06/25/golang%E4%B9%8B%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;&amp;emsp;golang中的函数和方法是不一样,方法有接受者,而函数不属于任何类型或者结构体.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之类型</title>
      <link>http://sergey.coding.me/2016/06/25/golang%E4%B9%8B%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 25 Jun 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/06/25/golang%E4%B9%8B%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;&amp;emsp;golang是一种静态类型的编程语言，所以在编译器进行编译的时候，就要知道每个值的类型，这样编译器就知道要为这个值分配多少内存，并且知道这段分配的内存表示什么。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之Map</title>
      <link>http://sergey.coding.me/2016/06/24/golang%E4%B9%8Bmap/</link>
      <pubDate>Fri, 24 Jun 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/06/24/golang%E4%B9%8Bmap/</guid>
      <description>&lt;p&gt;&amp;emsp;Map是一种数据结构，是一个集合，用于存储一系列无序的键值对。它基于键存储的，键就像一个索引一样，这也是Map强大的地方，可以快速快速检索数据，键指向与该键关联的值。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之slice</title>
      <link>http://sergey.coding.me/2016/06/20/golang%E4%B9%8Bslice/</link>
      <pubDate>Mon, 20 Jun 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/06/20/golang%E4%B9%8Bslice/</guid>
      <description>&lt;p&gt;&amp;emsp;golang切片与数组那样,初次接触我首先想到的是Objective-C的数组与动态数组.切片也是一种数据结构，它和数组非常相似，因为他是围绕动态数组的概念设计的.
&amp;emsp;切片灵活解决函数间传递数组的问题，比如复制问题，比如大小僵化问题.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang之数组</title>
      <link>http://sergey.coding.me/2016/06/18/golang%E4%B9%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 18 Jun 2016 12:00:23 +0800</pubDate>
      
      <guid>http://sergey.coding.me/2016/06/18/golang%E4%B9%8B%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;&amp;emsp;golang切片、Map映射等数据结构是以数组为基础的.初次接触数组,马上想到的是Objective-C的数组,两者相比较挺有意思的.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linked-post</title>
      <link>http://sergey.coding.me/2015/10/02/linked-post/</link>
      <pubDate>Fri, 02 Oct 2015 21:49:20 +0200</pubDate>
      
      <guid>http://sergey.coding.me/2015/10/02/linked-post/</guid>
      <description>I&amp;rsquo;m a linked post in the menu. You can add other posts by adding the following line to the frontmatter:
menu = &amp;quot;&amp;quot;  </description>
    </item>
    
  </channel>
</rss>